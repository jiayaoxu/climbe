<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.newcode.climb.mapper.UserMapper" >
  <resultMap id="BaseResultMap" type="cn.newcode.climb.po.User" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, username, password
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="seletcByUsername"  parameterType="java.lang.String" resultType="cn.newcode.climb.po.User" >
    select
    *
    from user
    where username = #{username}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="cn.newcode.climb.po.User" >
    insert into user (id, username, password
      )
    values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.newcode.climb.po.User" >
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="username != null" >
        username,
      </if>
      <if test="password != null" >
        password,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.newcode.climb.po.User" >
    update user
    <set >
      <if test="username != null" >
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.newcode.climb.po.User" >
    update user
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="seletcPersonalInf" parameterType="java.lang.Integer" resultType="cn.newcode.climb.vo.PersonalInf">
    SELECT user.username,
      user_inf.head_img  imgPath ,
      user_inf.nickName nickname,
      user_inf.gender gender,
      user_mood.mood mood ,
      rank_record.integral record,
      rank_medal.gold_medal,
      rank_medal.silver_medal,
      rank_medal.bronze_medal,
      rank_teacher.point teach,
      t.order,
	  fans.fens fens,
	  fans.attention attention,
	  club.name club
    FROM `user` LEFT JOIN rank_teacher ON rank_teacher.`teacher` = user.`id`,user_inf LEFT JOIN rank_medal ON rank_medal.`id` = user_inf.`uid` ,((user_mood LEFT JOIN rank_record ON rank_record.uid = user_mood.`uid`) LEFT JOIN club_member ON user_mood.`uid` = club_member.`member` ) LEFT JOIN club ON club.`id` = club_member.`cid`,
      (SELECT COUNT(flover)  AS `order` FROM rank_wall ,rockWall WHERE rockWall.id = rank_wall.wall AND rockWall.creater = #{id}) t,
	  (SELECT COUNT(fens) AS `fens`, COUNT(attention) AS `attention` FROM user_fans WHERE uid = #{id}) fans
    WHERE `user`.id = user_inf.uid
    AND user.id = user_mood.uid
    AND `user`.id = #{id}
  </select>
  <select id="selectIndex" parameterType="java.lang.Integer" resultType="cn.newcode.climb.vo.IndexVo">
    SELECT user_inf.head_img imgPath,user_inf.nickName,club.`name` clubName,user_limit.`limit`
    FROM   ( (user_inf LEFT JOIN user_limit ON user_inf.uid = user_limit.uid) LEFT JOIN club_member ON club_member.member = user_inf.uid) LEFT JOIN club ON club.id = club_member.cid
    WHERE user_inf.uid = #{uid}
  </select>
  <select id="selectAddFriends" resultType="cn.newcode.climb.vo.FriendsVo">
    SELECT user_inf.`nickName`,user_inf.`gender`,user_inf.`uid` id,club.name clubName,user_fans.`attention`
    FROM ((user_inf LEFT JOIN club_member ON user_inf.`uid` = club_member.`member`) LEFT JOIN club ON club_member.`cid` = club.`id` LEFT JOIN user_fans ON user_inf.`uid` = user_fans.`attention` AND user_fans.`uid`= #{uid})
    ,`user`
    WHERE user_inf.`uid` = user.`id`
    AND ( user_inf.nickName LIKE concat(concat('%',#{name}),'%') OR user.username LIKE concat(concat('%',#{name}),'%'))
  </select>
  <select id="selectCount" resultType="java.lang.Integer">
    SELECT COUNT(*) FROM  user_inf,`user` WHERE user_inf.uid = user.id
    AND
    ( user_inf.nickName LIKE concat(concat('%',#{name}),'%') OR user.username LIKE concat(concat('%',#{name}),'%') )
  </select>
  <select id="selectVersion" resultType="cn.newcode.climb.po.Version">
    SELECT * FROM Sys_version
  </select>
</mapper>